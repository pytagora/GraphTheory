# 
# code 3
# graph theory
# Valentino Skobljanec
#

IsNet:=function(A)
local i, j, t, g, G, sum, check;
check := 0;
G:=SymmetricGroup(0);
t:=NullGraph(G, Length(A));
g:=Graph(G, [1..Length(A)], OnPoints, function(x,y) return A[x][y]>0; end);
# check does the graph has loops
for i in [1..Length(A)] do
    if A[i][i] <> 0 then
        return false;
    fi;
od;
# building undirected graph for argument A - directed graph
for i in [1..Length(A)] do
    for j in g.adjacencies[i] do
        AddEdgeOrbit(t,[i,j]);
        AddEdgeOrbit(t,[j,i]);
    od;
od;
# variable for checking uniqueness of source and slope
# checking connectivity of a graph
if Size(ConnectedComponents(t)) <> 1 then 
    return false;
else
    for i in [1..Length(A)] do
	sum := 0;
        # check are all c(u,v) >= 0
	for j in [1..Length(A)] do
            if A[j][i] < 0 then
		return false;
            fi;
	    # sum all values in a column
            # znamo da je to jednako d-(u)
            sum := sum + A[j][i];
	od;
        # if it's equal 0 then we have a source
        if sum = 0 then
            check := check + 1;
        fi;
    od;
fi;
# checking uniqueness of a source
if check <> 1 then
    return false;
else 
    for i in [1..Length(A)] do
        # looking for a slope
        # checking are there some vertex with 
        # out degree zero -> d+(u) = 0
        if g.adjacencies[i] = [] then
            check := check + 1;
        fi;
    od;
fi;
# checking uniqueness of a slope
if check = 2 then
     return true;
fi;
return false;
end;

# A:=[[0,1,0,0,0,1],[0,0,1,0,1,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,1,1,0,0],[0,1,0,0,1,0]];
